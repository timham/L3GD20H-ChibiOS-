                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.2.0 #8008 (Jul  6 2012) (MINGW32)
                              4 ; This file was generated Sat Apr 06 16:03:11 2013
                              5 ;--------------------------------------------------------
                              6 	.module ebid
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Comm_IF_SMBusRead
                             13 	.globl _Comm_IF_SMBusWrite
                             14 	.globl _PB4
                             15 	.globl _PB3
                             16 	.globl _PB2
                             17 	.globl _PB1
                             18 	.globl _LCD_A0
                             19 	.globl _LCD_NSEL
                             20 	.globl _RF_PWRDN
                             21 	.globl _RF_NIRQ
                             22 	.globl _RF_NSEL
                             23 	.globl _MCU_MOSI
                             24 	.globl _MCU_MISO
                             25 	.globl _MCU_SCK
                             26 	.globl _BUZZ
                             27 	.globl _LED4
                             28 	.globl _LED3
                             29 	.globl _LED2
                             30 	.globl _LED1
                             31 	.globl _MCU_SCL
                             32 	.globl _MCU_SDA
                             33 	.globl _SPI0EN
                             34 	.globl _TXBMT0
                             35 	.globl _NSS0MD0
                             36 	.globl _NSS0MD1
                             37 	.globl _RXOVRN0
                             38 	.globl _MODF0
                             39 	.globl _WCOL0
                             40 	.globl _SPIF0
                             41 	.globl _AD0CM0
                             42 	.globl _AD0CM1
                             43 	.globl _AD0CM2
                             44 	.globl _AD0WINT
                             45 	.globl _AD0BUSY
                             46 	.globl _AD0INT
                             47 	.globl _BURSTEN
                             48 	.globl _AD0EN
                             49 	.globl _CCF0
                             50 	.globl _CCF1
                             51 	.globl _CCF2
                             52 	.globl _CCF3
                             53 	.globl _CCF4
                             54 	.globl _CCF5
                             55 	.globl _CR
                             56 	.globl _CF
                             57 	.globl _P
                             58 	.globl _F1
                             59 	.globl _OV
                             60 	.globl _RS0
                             61 	.globl _RS1
                             62 	.globl _F0
                             63 	.globl _AC
                             64 	.globl _CY
                             65 	.globl _T2XCLK
                             66 	.globl _T2RCLK
                             67 	.globl _TR2
                             68 	.globl _T2SPLIT
                             69 	.globl _TF2CEN
                             70 	.globl _TF2LEN
                             71 	.globl _TF2L
                             72 	.globl _TF2H
                             73 	.globl _SI
                             74 	.globl _ACK
                             75 	.globl _ARBLOST
                             76 	.globl _ACKRQ
                             77 	.globl _STO
                             78 	.globl _STA
                             79 	.globl _TXMODE
                             80 	.globl _MASTER
                             81 	.globl _PX0
                             82 	.globl _PT0
                             83 	.globl _PX1
                             84 	.globl _PT1
                             85 	.globl _PS0
                             86 	.globl _PT2
                             87 	.globl _PSPI0
                             88 	.globl _SPI1EN
                             89 	.globl _TXBMT1
                             90 	.globl _NSS1MD0
                             91 	.globl _NSS1MD1
                             92 	.globl _RXOVRN1
                             93 	.globl _MODF1
                             94 	.globl _WCOL1
                             95 	.globl _SPIF1
                             96 	.globl _EX0
                             97 	.globl _ET0
                             98 	.globl _EX1
                             99 	.globl _ET1
                            100 	.globl _ES0
                            101 	.globl _ET2
                            102 	.globl _ESPI0
                            103 	.globl _EA
                            104 	.globl _RI0
                            105 	.globl _TI0
                            106 	.globl _RB80
                            107 	.globl _TB80
                            108 	.globl _REN0
                            109 	.globl _MCE0
                            110 	.globl _S0MODE
                            111 	.globl _IT0
                            112 	.globl _IE0
                            113 	.globl _IT1
                            114 	.globl _IE1
                            115 	.globl _TR0
                            116 	.globl _TF0
                            117 	.globl _TR1
                            118 	.globl _TF1
                            119 	.globl _PCA0CP4
                            120 	.globl _PCA0CP0
                            121 	.globl _PCA0
                            122 	.globl _PCA0CP3
                            123 	.globl _PCA0CP2
                            124 	.globl _PCA0CP1
                            125 	.globl _PCA0CP5
                            126 	.globl _TMR2
                            127 	.globl _TMR2RL
                            128 	.globl _ADC0LT
                            129 	.globl _ADC0GT
                            130 	.globl _ADC0
                            131 	.globl _TMR3
                            132 	.globl _TMR3RL
                            133 	.globl _TOFF
                            134 	.globl _DP
                            135 	.globl _VDM0CN
                            136 	.globl _PCA0CPH4
                            137 	.globl _PCA0CPL4
                            138 	.globl _PCA0CPH0
                            139 	.globl _PCA0CPL0
                            140 	.globl _PCA0H
                            141 	.globl _PCA0L
                            142 	.globl _SPI0CN
                            143 	.globl _EIP2
                            144 	.globl _EIP1
                            145 	.globl _SMB0ADM
                            146 	.globl _SMB0ADR
                            147 	.globl _P2MDIN
                            148 	.globl _P1MDIN
                            149 	.globl _P0MDIN
                            150 	.globl _B
                            151 	.globl _RSTSRC
                            152 	.globl _PCA0CPH3
                            153 	.globl _PCA0CPL3
                            154 	.globl _PCA0CPH2
                            155 	.globl _PCA0CPL2
                            156 	.globl _PCA0CPH1
                            157 	.globl _PCA0CPL1
                            158 	.globl _ADC0CN
                            159 	.globl _EIE2
                            160 	.globl _EIE1
                            161 	.globl _FLWR
                            162 	.globl _IT01CF
                            163 	.globl _XBR2
                            164 	.globl _XBR1
                            165 	.globl _XBR0
                            166 	.globl _ACC
                            167 	.globl _PCA0PWM
                            168 	.globl _PCA0CPM4
                            169 	.globl _PCA0CPM3
                            170 	.globl _PCA0CPM2
                            171 	.globl _PCA0CPM1
                            172 	.globl _PCA0CPM0
                            173 	.globl _PCA0MD
                            174 	.globl _PCA0CN
                            175 	.globl _P0MAT
                            176 	.globl _P2SKIP
                            177 	.globl _P1SKIP
                            178 	.globl _P0SKIP
                            179 	.globl _PCA0CPH5
                            180 	.globl _PCA0CPL5
                            181 	.globl _REF0CN
                            182 	.globl _PSW
                            183 	.globl _P1MAT
                            184 	.globl _PCA0CPM5
                            185 	.globl _TMR2H
                            186 	.globl _TMR2L
                            187 	.globl _TMR2RLH
                            188 	.globl _TMR2RLL
                            189 	.globl _REG0CN
                            190 	.globl _TMR2CN
                            191 	.globl _P0MASK
                            192 	.globl _ADC0LTH
                            193 	.globl _ADC0LTL
                            194 	.globl _ADC0GTH
                            195 	.globl _ADC0GTL
                            196 	.globl _SMB0DAT
                            197 	.globl _SMB0CF
                            198 	.globl _SMB0CN
                            199 	.globl _P1MASK
                            200 	.globl _ADC0H
                            201 	.globl _ADC0L
                            202 	.globl _ADC0TK
                            203 	.globl _ADC0CF
                            204 	.globl _ADC0MX
                            205 	.globl _ADC0PWR
                            206 	.globl _ADC0AC
                            207 	.globl _IREF0CN
                            208 	.globl _IP
                            209 	.globl _FLKEY
                            210 	.globl _FLSCL
                            211 	.globl _PMU0CF
                            212 	.globl _OSCICL
                            213 	.globl _OSCICN
                            214 	.globl _OSCXCN
                            215 	.globl _SPI1CN
                            216 	.globl _ONESHOT
                            217 	.globl _EMI0TC
                            218 	.globl _RTC0KEY
                            219 	.globl _RTC0DAT
                            220 	.globl _RTC0ADR
                            221 	.globl _EMI0CF
                            222 	.globl _EMI0CN
                            223 	.globl _CLKSEL
                            224 	.globl _IE
                            225 	.globl _SFRPAGE
                            226 	.globl _P2DRV
                            227 	.globl _P2MDOUT
                            228 	.globl _P1DRV
                            229 	.globl _P1MDOUT
                            230 	.globl _P0DRV
                            231 	.globl _P0MDOUT
                            232 	.globl _SPI0DAT
                            233 	.globl _SPI0CKR
                            234 	.globl _SPI0CFG
                            235 	.globl _P2
                            236 	.globl _CPT0MX
                            237 	.globl _CPT1MX
                            238 	.globl _CPT0MD
                            239 	.globl _CPT1MD
                            240 	.globl _CPT0CN
                            241 	.globl _CPT1CN
                            242 	.globl _SBUF0
                            243 	.globl _SCON0
                            244 	.globl _CRC0CNT
                            245 	.globl _DC0CN
                            246 	.globl _CRC0AUTO
                            247 	.globl _DC0CF
                            248 	.globl _TMR3H
                            249 	.globl _CRC0FLIP
                            250 	.globl _TMR3L
                            251 	.globl _CRC0IN
                            252 	.globl _TMR3RLH
                            253 	.globl _CRC0CN
                            254 	.globl _TMR3RLL
                            255 	.globl _CRC0DAT
                            256 	.globl _TMR3CN
                            257 	.globl _P1
                            258 	.globl _PSCTL
                            259 	.globl _CKCON
                            260 	.globl _TH1
                            261 	.globl _TH0
                            262 	.globl _TL1
                            263 	.globl _TL0
                            264 	.globl _TMOD
                            265 	.globl _TCON
                            266 	.globl _PCON
                            267 	.globl _TOFFH
                            268 	.globl _SPI1DAT
                            269 	.globl _TOFFL
                            270 	.globl _SPI1CKR
                            271 	.globl _SPI1CFG
                            272 	.globl _DPH
                            273 	.globl _DPL
                            274 	.globl _SP
                            275 	.globl _P0
                            276 	.globl _EBIDInfo
                            277 	.globl _EBID_CheckAvailability
                            278 	.globl _EBID_SearchRadioRecord
                            279 ;--------------------------------------------------------
                            280 ; special function registers
                            281 ;--------------------------------------------------------
                            282 	.area RSEG    (ABS,DATA)
   0000                     283 	.org 0x0000
                    0080    284 G$P0$0$0 == 0x0080
                    0080    285 _P0	=	0x0080
                    0081    286 G$SP$0$0 == 0x0081
                    0081    287 _SP	=	0x0081
                    0082    288 G$DPL$0$0 == 0x0082
                    0082    289 _DPL	=	0x0082
                    0083    290 G$DPH$0$0 == 0x0083
                    0083    291 _DPH	=	0x0083
                    0084    292 G$SPI1CFG$0$0 == 0x0084
                    0084    293 _SPI1CFG	=	0x0084
                    0085    294 G$SPI1CKR$0$0 == 0x0085
                    0085    295 _SPI1CKR	=	0x0085
                    0085    296 G$TOFFL$0$0 == 0x0085
                    0085    297 _TOFFL	=	0x0085
                    0086    298 G$SPI1DAT$0$0 == 0x0086
                    0086    299 _SPI1DAT	=	0x0086
                    0086    300 G$TOFFH$0$0 == 0x0086
                    0086    301 _TOFFH	=	0x0086
                    0087    302 G$PCON$0$0 == 0x0087
                    0087    303 _PCON	=	0x0087
                    0088    304 G$TCON$0$0 == 0x0088
                    0088    305 _TCON	=	0x0088
                    0089    306 G$TMOD$0$0 == 0x0089
                    0089    307 _TMOD	=	0x0089
                    008A    308 G$TL0$0$0 == 0x008a
                    008A    309 _TL0	=	0x008a
                    008B    310 G$TL1$0$0 == 0x008b
                    008B    311 _TL1	=	0x008b
                    008C    312 G$TH0$0$0 == 0x008c
                    008C    313 _TH0	=	0x008c
                    008D    314 G$TH1$0$0 == 0x008d
                    008D    315 _TH1	=	0x008d
                    008E    316 G$CKCON$0$0 == 0x008e
                    008E    317 _CKCON	=	0x008e
                    008F    318 G$PSCTL$0$0 == 0x008f
                    008F    319 _PSCTL	=	0x008f
                    0090    320 G$P1$0$0 == 0x0090
                    0090    321 _P1	=	0x0090
                    0091    322 G$TMR3CN$0$0 == 0x0091
                    0091    323 _TMR3CN	=	0x0091
                    0091    324 G$CRC0DAT$0$0 == 0x0091
                    0091    325 _CRC0DAT	=	0x0091
                    0092    326 G$TMR3RLL$0$0 == 0x0092
                    0092    327 _TMR3RLL	=	0x0092
                    0092    328 G$CRC0CN$0$0 == 0x0092
                    0092    329 _CRC0CN	=	0x0092
                    0093    330 G$TMR3RLH$0$0 == 0x0093
                    0093    331 _TMR3RLH	=	0x0093
                    0093    332 G$CRC0IN$0$0 == 0x0093
                    0093    333 _CRC0IN	=	0x0093
                    0094    334 G$TMR3L$0$0 == 0x0094
                    0094    335 _TMR3L	=	0x0094
                    0095    336 G$CRC0FLIP$0$0 == 0x0095
                    0095    337 _CRC0FLIP	=	0x0095
                    0095    338 G$TMR3H$0$0 == 0x0095
                    0095    339 _TMR3H	=	0x0095
                    0096    340 G$DC0CF$0$0 == 0x0096
                    0096    341 _DC0CF	=	0x0096
                    0096    342 G$CRC0AUTO$0$0 == 0x0096
                    0096    343 _CRC0AUTO	=	0x0096
                    0097    344 G$DC0CN$0$0 == 0x0097
                    0097    345 _DC0CN	=	0x0097
                    0097    346 G$CRC0CNT$0$0 == 0x0097
                    0097    347 _CRC0CNT	=	0x0097
                    0098    348 G$SCON0$0$0 == 0x0098
                    0098    349 _SCON0	=	0x0098
                    0099    350 G$SBUF0$0$0 == 0x0099
                    0099    351 _SBUF0	=	0x0099
                    009A    352 G$CPT1CN$0$0 == 0x009a
                    009A    353 _CPT1CN	=	0x009a
                    009B    354 G$CPT0CN$0$0 == 0x009b
                    009B    355 _CPT0CN	=	0x009b
                    009C    356 G$CPT1MD$0$0 == 0x009c
                    009C    357 _CPT1MD	=	0x009c
                    009D    358 G$CPT0MD$0$0 == 0x009d
                    009D    359 _CPT0MD	=	0x009d
                    009E    360 G$CPT1MX$0$0 == 0x009e
                    009E    361 _CPT1MX	=	0x009e
                    009F    362 G$CPT0MX$0$0 == 0x009f
                    009F    363 _CPT0MX	=	0x009f
                    00A0    364 G$P2$0$0 == 0x00a0
                    00A0    365 _P2	=	0x00a0
                    00A1    366 G$SPI0CFG$0$0 == 0x00a1
                    00A1    367 _SPI0CFG	=	0x00a1
                    00A2    368 G$SPI0CKR$0$0 == 0x00a2
                    00A2    369 _SPI0CKR	=	0x00a2
                    00A3    370 G$SPI0DAT$0$0 == 0x00a3
                    00A3    371 _SPI0DAT	=	0x00a3
                    00A4    372 G$P0MDOUT$0$0 == 0x00a4
                    00A4    373 _P0MDOUT	=	0x00a4
                    00A4    374 G$P0DRV$0$0 == 0x00a4
                    00A4    375 _P0DRV	=	0x00a4
                    00A5    376 G$P1MDOUT$0$0 == 0x00a5
                    00A5    377 _P1MDOUT	=	0x00a5
                    00A5    378 G$P1DRV$0$0 == 0x00a5
                    00A5    379 _P1DRV	=	0x00a5
                    00A6    380 G$P2MDOUT$0$0 == 0x00a6
                    00A6    381 _P2MDOUT	=	0x00a6
                    00A6    382 G$P2DRV$0$0 == 0x00a6
                    00A6    383 _P2DRV	=	0x00a6
                    00A7    384 G$SFRPAGE$0$0 == 0x00a7
                    00A7    385 _SFRPAGE	=	0x00a7
                    00A8    386 G$IE$0$0 == 0x00a8
                    00A8    387 _IE	=	0x00a8
                    00A9    388 G$CLKSEL$0$0 == 0x00a9
                    00A9    389 _CLKSEL	=	0x00a9
                    00AA    390 G$EMI0CN$0$0 == 0x00aa
                    00AA    391 _EMI0CN	=	0x00aa
                    00AB    392 G$EMI0CF$0$0 == 0x00ab
                    00AB    393 _EMI0CF	=	0x00ab
                    00AC    394 G$RTC0ADR$0$0 == 0x00ac
                    00AC    395 _RTC0ADR	=	0x00ac
                    00AD    396 G$RTC0DAT$0$0 == 0x00ad
                    00AD    397 _RTC0DAT	=	0x00ad
                    00AE    398 G$RTC0KEY$0$0 == 0x00ae
                    00AE    399 _RTC0KEY	=	0x00ae
                    00AF    400 G$EMI0TC$0$0 == 0x00af
                    00AF    401 _EMI0TC	=	0x00af
                    00AF    402 G$ONESHOT$0$0 == 0x00af
                    00AF    403 _ONESHOT	=	0x00af
                    00B0    404 G$SPI1CN$0$0 == 0x00b0
                    00B0    405 _SPI1CN	=	0x00b0
                    00B1    406 G$OSCXCN$0$0 == 0x00b1
                    00B1    407 _OSCXCN	=	0x00b1
                    00B2    408 G$OSCICN$0$0 == 0x00b2
                    00B2    409 _OSCICN	=	0x00b2
                    00B3    410 G$OSCICL$0$0 == 0x00b3
                    00B3    411 _OSCICL	=	0x00b3
                    00B5    412 G$PMU0CF$0$0 == 0x00b5
                    00B5    413 _PMU0CF	=	0x00b5
                    00B6    414 G$FLSCL$0$0 == 0x00b6
                    00B6    415 _FLSCL	=	0x00b6
                    00B7    416 G$FLKEY$0$0 == 0x00b7
                    00B7    417 _FLKEY	=	0x00b7
                    00B8    418 G$IP$0$0 == 0x00b8
                    00B8    419 _IP	=	0x00b8
                    00B9    420 G$IREF0CN$0$0 == 0x00b9
                    00B9    421 _IREF0CN	=	0x00b9
                    00BA    422 G$ADC0AC$0$0 == 0x00ba
                    00BA    423 _ADC0AC	=	0x00ba
                    00BA    424 G$ADC0PWR$0$0 == 0x00ba
                    00BA    425 _ADC0PWR	=	0x00ba
                    00BB    426 G$ADC0MX$0$0 == 0x00bb
                    00BB    427 _ADC0MX	=	0x00bb
                    00BC    428 G$ADC0CF$0$0 == 0x00bc
                    00BC    429 _ADC0CF	=	0x00bc
                    00BD    430 G$ADC0TK$0$0 == 0x00bd
                    00BD    431 _ADC0TK	=	0x00bd
                    00BD    432 G$ADC0L$0$0 == 0x00bd
                    00BD    433 _ADC0L	=	0x00bd
                    00BE    434 G$ADC0H$0$0 == 0x00be
                    00BE    435 _ADC0H	=	0x00be
                    00BF    436 G$P1MASK$0$0 == 0x00bf
                    00BF    437 _P1MASK	=	0x00bf
                    00C0    438 G$SMB0CN$0$0 == 0x00c0
                    00C0    439 _SMB0CN	=	0x00c0
                    00C1    440 G$SMB0CF$0$0 == 0x00c1
                    00C1    441 _SMB0CF	=	0x00c1
                    00C2    442 G$SMB0DAT$0$0 == 0x00c2
                    00C2    443 _SMB0DAT	=	0x00c2
                    00C3    444 G$ADC0GTL$0$0 == 0x00c3
                    00C3    445 _ADC0GTL	=	0x00c3
                    00C4    446 G$ADC0GTH$0$0 == 0x00c4
                    00C4    447 _ADC0GTH	=	0x00c4
                    00C5    448 G$ADC0LTL$0$0 == 0x00c5
                    00C5    449 _ADC0LTL	=	0x00c5
                    00C6    450 G$ADC0LTH$0$0 == 0x00c6
                    00C6    451 _ADC0LTH	=	0x00c6
                    00C7    452 G$P0MASK$0$0 == 0x00c7
                    00C7    453 _P0MASK	=	0x00c7
                    00C8    454 G$TMR2CN$0$0 == 0x00c8
                    00C8    455 _TMR2CN	=	0x00c8
                    00C9    456 G$REG0CN$0$0 == 0x00c9
                    00C9    457 _REG0CN	=	0x00c9
                    00CA    458 G$TMR2RLL$0$0 == 0x00ca
                    00CA    459 _TMR2RLL	=	0x00ca
                    00CB    460 G$TMR2RLH$0$0 == 0x00cb
                    00CB    461 _TMR2RLH	=	0x00cb
                    00CC    462 G$TMR2L$0$0 == 0x00cc
                    00CC    463 _TMR2L	=	0x00cc
                    00CD    464 G$TMR2H$0$0 == 0x00cd
                    00CD    465 _TMR2H	=	0x00cd
                    00CE    466 G$PCA0CPM5$0$0 == 0x00ce
                    00CE    467 _PCA0CPM5	=	0x00ce
                    00CF    468 G$P1MAT$0$0 == 0x00cf
                    00CF    469 _P1MAT	=	0x00cf
                    00D0    470 G$PSW$0$0 == 0x00d0
                    00D0    471 _PSW	=	0x00d0
                    00D1    472 G$REF0CN$0$0 == 0x00d1
                    00D1    473 _REF0CN	=	0x00d1
                    00D2    474 G$PCA0CPL5$0$0 == 0x00d2
                    00D2    475 _PCA0CPL5	=	0x00d2
                    00D3    476 G$PCA0CPH5$0$0 == 0x00d3
                    00D3    477 _PCA0CPH5	=	0x00d3
                    00D4    478 G$P0SKIP$0$0 == 0x00d4
                    00D4    479 _P0SKIP	=	0x00d4
                    00D5    480 G$P1SKIP$0$0 == 0x00d5
                    00D5    481 _P1SKIP	=	0x00d5
                    00D6    482 G$P2SKIP$0$0 == 0x00d6
                    00D6    483 _P2SKIP	=	0x00d6
                    00D7    484 G$P0MAT$0$0 == 0x00d7
                    00D7    485 _P0MAT	=	0x00d7
                    00D8    486 G$PCA0CN$0$0 == 0x00d8
                    00D8    487 _PCA0CN	=	0x00d8
                    00D9    488 G$PCA0MD$0$0 == 0x00d9
                    00D9    489 _PCA0MD	=	0x00d9
                    00DA    490 G$PCA0CPM0$0$0 == 0x00da
                    00DA    491 _PCA0CPM0	=	0x00da
                    00DB    492 G$PCA0CPM1$0$0 == 0x00db
                    00DB    493 _PCA0CPM1	=	0x00db
                    00DC    494 G$PCA0CPM2$0$0 == 0x00dc
                    00DC    495 _PCA0CPM2	=	0x00dc
                    00DD    496 G$PCA0CPM3$0$0 == 0x00dd
                    00DD    497 _PCA0CPM3	=	0x00dd
                    00DE    498 G$PCA0CPM4$0$0 == 0x00de
                    00DE    499 _PCA0CPM4	=	0x00de
                    00DF    500 G$PCA0PWM$0$0 == 0x00df
                    00DF    501 _PCA0PWM	=	0x00df
                    00E0    502 G$ACC$0$0 == 0x00e0
                    00E0    503 _ACC	=	0x00e0
                    00E1    504 G$XBR0$0$0 == 0x00e1
                    00E1    505 _XBR0	=	0x00e1
                    00E2    506 G$XBR1$0$0 == 0x00e2
                    00E2    507 _XBR1	=	0x00e2
                    00E3    508 G$XBR2$0$0 == 0x00e3
                    00E3    509 _XBR2	=	0x00e3
                    00E4    510 G$IT01CF$0$0 == 0x00e4
                    00E4    511 _IT01CF	=	0x00e4
                    00E5    512 G$FLWR$0$0 == 0x00e5
                    00E5    513 _FLWR	=	0x00e5
                    00E6    514 G$EIE1$0$0 == 0x00e6
                    00E6    515 _EIE1	=	0x00e6
                    00E7    516 G$EIE2$0$0 == 0x00e7
                    00E7    517 _EIE2	=	0x00e7
                    00E8    518 G$ADC0CN$0$0 == 0x00e8
                    00E8    519 _ADC0CN	=	0x00e8
                    00E9    520 G$PCA0CPL1$0$0 == 0x00e9
                    00E9    521 _PCA0CPL1	=	0x00e9
                    00EA    522 G$PCA0CPH1$0$0 == 0x00ea
                    00EA    523 _PCA0CPH1	=	0x00ea
                    00EB    524 G$PCA0CPL2$0$0 == 0x00eb
                    00EB    525 _PCA0CPL2	=	0x00eb
                    00EC    526 G$PCA0CPH2$0$0 == 0x00ec
                    00EC    527 _PCA0CPH2	=	0x00ec
                    00ED    528 G$PCA0CPL3$0$0 == 0x00ed
                    00ED    529 _PCA0CPL3	=	0x00ed
                    00EE    530 G$PCA0CPH3$0$0 == 0x00ee
                    00EE    531 _PCA0CPH3	=	0x00ee
                    00EF    532 G$RSTSRC$0$0 == 0x00ef
                    00EF    533 _RSTSRC	=	0x00ef
                    00F0    534 G$B$0$0 == 0x00f0
                    00F0    535 _B	=	0x00f0
                    00F1    536 G$P0MDIN$0$0 == 0x00f1
                    00F1    537 _P0MDIN	=	0x00f1
                    00F2    538 G$P1MDIN$0$0 == 0x00f2
                    00F2    539 _P1MDIN	=	0x00f2
                    00F3    540 G$P2MDIN$0$0 == 0x00f3
                    00F3    541 _P2MDIN	=	0x00f3
                    00F4    542 G$SMB0ADR$0$0 == 0x00f4
                    00F4    543 _SMB0ADR	=	0x00f4
                    00F5    544 G$SMB0ADM$0$0 == 0x00f5
                    00F5    545 _SMB0ADM	=	0x00f5
                    00F6    546 G$EIP1$0$0 == 0x00f6
                    00F6    547 _EIP1	=	0x00f6
                    00F7    548 G$EIP2$0$0 == 0x00f7
                    00F7    549 _EIP2	=	0x00f7
                    00F8    550 G$SPI0CN$0$0 == 0x00f8
                    00F8    551 _SPI0CN	=	0x00f8
                    00F9    552 G$PCA0L$0$0 == 0x00f9
                    00F9    553 _PCA0L	=	0x00f9
                    00FA    554 G$PCA0H$0$0 == 0x00fa
                    00FA    555 _PCA0H	=	0x00fa
                    00FB    556 G$PCA0CPL0$0$0 == 0x00fb
                    00FB    557 _PCA0CPL0	=	0x00fb
                    00FC    558 G$PCA0CPH0$0$0 == 0x00fc
                    00FC    559 _PCA0CPH0	=	0x00fc
                    00FD    560 G$PCA0CPL4$0$0 == 0x00fd
                    00FD    561 _PCA0CPL4	=	0x00fd
                    00FE    562 G$PCA0CPH4$0$0 == 0x00fe
                    00FE    563 _PCA0CPH4	=	0x00fe
                    00FF    564 G$VDM0CN$0$0 == 0x00ff
                    00FF    565 _VDM0CN	=	0x00ff
                    8382    566 G$DP$0$0 == 0x8382
                    8382    567 _DP	=	0x8382
                    8685    568 G$TOFF$0$0 == 0x8685
                    8685    569 _TOFF	=	0x8685
                    9392    570 G$TMR3RL$0$0 == 0x9392
                    9392    571 _TMR3RL	=	0x9392
                    9594    572 G$TMR3$0$0 == 0x9594
                    9594    573 _TMR3	=	0x9594
                    BEBD    574 G$ADC0$0$0 == 0xbebd
                    BEBD    575 _ADC0	=	0xbebd
                    C4C3    576 G$ADC0GT$0$0 == 0xc4c3
                    C4C3    577 _ADC0GT	=	0xc4c3
                    C6C5    578 G$ADC0LT$0$0 == 0xc6c5
                    C6C5    579 _ADC0LT	=	0xc6c5
                    CBCA    580 G$TMR2RL$0$0 == 0xcbca
                    CBCA    581 _TMR2RL	=	0xcbca
                    CDCC    582 G$TMR2$0$0 == 0xcdcc
                    CDCC    583 _TMR2	=	0xcdcc
                    D3D2    584 G$PCA0CP5$0$0 == 0xd3d2
                    D3D2    585 _PCA0CP5	=	0xd3d2
                    EAE9    586 G$PCA0CP1$0$0 == 0xeae9
                    EAE9    587 _PCA0CP1	=	0xeae9
                    ECEB    588 G$PCA0CP2$0$0 == 0xeceb
                    ECEB    589 _PCA0CP2	=	0xeceb
                    EEED    590 G$PCA0CP3$0$0 == 0xeeed
                    EEED    591 _PCA0CP3	=	0xeeed
                    FAF9    592 G$PCA0$0$0 == 0xfaf9
                    FAF9    593 _PCA0	=	0xfaf9
                    FCFB    594 G$PCA0CP0$0$0 == 0xfcfb
                    FCFB    595 _PCA0CP0	=	0xfcfb
                    FEFD    596 G$PCA0CP4$0$0 == 0xfefd
                    FEFD    597 _PCA0CP4	=	0xfefd
                            598 ;--------------------------------------------------------
                            599 ; special function bits
                            600 ;--------------------------------------------------------
                            601 	.area RSEG    (ABS,DATA)
   0000                     602 	.org 0x0000
                    008F    603 G$TF1$0$0 == 0x008f
                    008F    604 _TF1	=	0x008f
                    008E    605 G$TR1$0$0 == 0x008e
                    008E    606 _TR1	=	0x008e
                    008D    607 G$TF0$0$0 == 0x008d
                    008D    608 _TF0	=	0x008d
                    008C    609 G$TR0$0$0 == 0x008c
                    008C    610 _TR0	=	0x008c
                    008B    611 G$IE1$0$0 == 0x008b
                    008B    612 _IE1	=	0x008b
                    008A    613 G$IT1$0$0 == 0x008a
                    008A    614 _IT1	=	0x008a
                    0089    615 G$IE0$0$0 == 0x0089
                    0089    616 _IE0	=	0x0089
                    0088    617 G$IT0$0$0 == 0x0088
                    0088    618 _IT0	=	0x0088
                    009F    619 G$S0MODE$0$0 == 0x009f
                    009F    620 _S0MODE	=	0x009f
                    009D    621 G$MCE0$0$0 == 0x009d
                    009D    622 _MCE0	=	0x009d
                    009C    623 G$REN0$0$0 == 0x009c
                    009C    624 _REN0	=	0x009c
                    009B    625 G$TB80$0$0 == 0x009b
                    009B    626 _TB80	=	0x009b
                    009A    627 G$RB80$0$0 == 0x009a
                    009A    628 _RB80	=	0x009a
                    0099    629 G$TI0$0$0 == 0x0099
                    0099    630 _TI0	=	0x0099
                    0098    631 G$RI0$0$0 == 0x0098
                    0098    632 _RI0	=	0x0098
                    00AF    633 G$EA$0$0 == 0x00af
                    00AF    634 _EA	=	0x00af
                    00AE    635 G$ESPI0$0$0 == 0x00ae
                    00AE    636 _ESPI0	=	0x00ae
                    00AD    637 G$ET2$0$0 == 0x00ad
                    00AD    638 _ET2	=	0x00ad
                    00AC    639 G$ES0$0$0 == 0x00ac
                    00AC    640 _ES0	=	0x00ac
                    00AB    641 G$ET1$0$0 == 0x00ab
                    00AB    642 _ET1	=	0x00ab
                    00AA    643 G$EX1$0$0 == 0x00aa
                    00AA    644 _EX1	=	0x00aa
                    00A9    645 G$ET0$0$0 == 0x00a9
                    00A9    646 _ET0	=	0x00a9
                    00A8    647 G$EX0$0$0 == 0x00a8
                    00A8    648 _EX0	=	0x00a8
                    00B7    649 G$SPIF1$0$0 == 0x00b7
                    00B7    650 _SPIF1	=	0x00b7
                    00B6    651 G$WCOL1$0$0 == 0x00b6
                    00B6    652 _WCOL1	=	0x00b6
                    00B5    653 G$MODF1$0$0 == 0x00b5
                    00B5    654 _MODF1	=	0x00b5
                    00B4    655 G$RXOVRN1$0$0 == 0x00b4
                    00B4    656 _RXOVRN1	=	0x00b4
                    00B3    657 G$NSS1MD1$0$0 == 0x00b3
                    00B3    658 _NSS1MD1	=	0x00b3
                    00B2    659 G$NSS1MD0$0$0 == 0x00b2
                    00B2    660 _NSS1MD0	=	0x00b2
                    00B1    661 G$TXBMT1$0$0 == 0x00b1
                    00B1    662 _TXBMT1	=	0x00b1
                    00B0    663 G$SPI1EN$0$0 == 0x00b0
                    00B0    664 _SPI1EN	=	0x00b0
                    00BE    665 G$PSPI0$0$0 == 0x00be
                    00BE    666 _PSPI0	=	0x00be
                    00BD    667 G$PT2$0$0 == 0x00bd
                    00BD    668 _PT2	=	0x00bd
                    00BC    669 G$PS0$0$0 == 0x00bc
                    00BC    670 _PS0	=	0x00bc
                    00BB    671 G$PT1$0$0 == 0x00bb
                    00BB    672 _PT1	=	0x00bb
                    00BA    673 G$PX1$0$0 == 0x00ba
                    00BA    674 _PX1	=	0x00ba
                    00B9    675 G$PT0$0$0 == 0x00b9
                    00B9    676 _PT0	=	0x00b9
                    00B8    677 G$PX0$0$0 == 0x00b8
                    00B8    678 _PX0	=	0x00b8
                    00C7    679 G$MASTER$0$0 == 0x00c7
                    00C7    680 _MASTER	=	0x00c7
                    00C6    681 G$TXMODE$0$0 == 0x00c6
                    00C6    682 _TXMODE	=	0x00c6
                    00C5    683 G$STA$0$0 == 0x00c5
                    00C5    684 _STA	=	0x00c5
                    00C4    685 G$STO$0$0 == 0x00c4
                    00C4    686 _STO	=	0x00c4
                    00C3    687 G$ACKRQ$0$0 == 0x00c3
                    00C3    688 _ACKRQ	=	0x00c3
                    00C2    689 G$ARBLOST$0$0 == 0x00c2
                    00C2    690 _ARBLOST	=	0x00c2
                    00C1    691 G$ACK$0$0 == 0x00c1
                    00C1    692 _ACK	=	0x00c1
                    00C0    693 G$SI$0$0 == 0x00c0
                    00C0    694 _SI	=	0x00c0
                    00CF    695 G$TF2H$0$0 == 0x00cf
                    00CF    696 _TF2H	=	0x00cf
                    00CE    697 G$TF2L$0$0 == 0x00ce
                    00CE    698 _TF2L	=	0x00ce
                    00CD    699 G$TF2LEN$0$0 == 0x00cd
                    00CD    700 _TF2LEN	=	0x00cd
                    00CC    701 G$TF2CEN$0$0 == 0x00cc
                    00CC    702 _TF2CEN	=	0x00cc
                    00CB    703 G$T2SPLIT$0$0 == 0x00cb
                    00CB    704 _T2SPLIT	=	0x00cb
                    00CA    705 G$TR2$0$0 == 0x00ca
                    00CA    706 _TR2	=	0x00ca
                    00C9    707 G$T2RCLK$0$0 == 0x00c9
                    00C9    708 _T2RCLK	=	0x00c9
                    00C8    709 G$T2XCLK$0$0 == 0x00c8
                    00C8    710 _T2XCLK	=	0x00c8
                    00D7    711 G$CY$0$0 == 0x00d7
                    00D7    712 _CY	=	0x00d7
                    00D6    713 G$AC$0$0 == 0x00d6
                    00D6    714 _AC	=	0x00d6
                    00D5    715 G$F0$0$0 == 0x00d5
                    00D5    716 _F0	=	0x00d5
                    00D4    717 G$RS1$0$0 == 0x00d4
                    00D4    718 _RS1	=	0x00d4
                    00D3    719 G$RS0$0$0 == 0x00d3
                    00D3    720 _RS0	=	0x00d3
                    00D2    721 G$OV$0$0 == 0x00d2
                    00D2    722 _OV	=	0x00d2
                    00D1    723 G$F1$0$0 == 0x00d1
                    00D1    724 _F1	=	0x00d1
                    00D0    725 G$P$0$0 == 0x00d0
                    00D0    726 _P	=	0x00d0
                    00DF    727 G$CF$0$0 == 0x00df
                    00DF    728 _CF	=	0x00df
                    00DE    729 G$CR$0$0 == 0x00de
                    00DE    730 _CR	=	0x00de
                    00DD    731 G$CCF5$0$0 == 0x00dd
                    00DD    732 _CCF5	=	0x00dd
                    00DC    733 G$CCF4$0$0 == 0x00dc
                    00DC    734 _CCF4	=	0x00dc
                    00DB    735 G$CCF3$0$0 == 0x00db
                    00DB    736 _CCF3	=	0x00db
                    00DA    737 G$CCF2$0$0 == 0x00da
                    00DA    738 _CCF2	=	0x00da
                    00D9    739 G$CCF1$0$0 == 0x00d9
                    00D9    740 _CCF1	=	0x00d9
                    00D8    741 G$CCF0$0$0 == 0x00d8
                    00D8    742 _CCF0	=	0x00d8
                    00EF    743 G$AD0EN$0$0 == 0x00ef
                    00EF    744 _AD0EN	=	0x00ef
                    00EE    745 G$BURSTEN$0$0 == 0x00ee
                    00EE    746 _BURSTEN	=	0x00ee
                    00ED    747 G$AD0INT$0$0 == 0x00ed
                    00ED    748 _AD0INT	=	0x00ed
                    00EC    749 G$AD0BUSY$0$0 == 0x00ec
                    00EC    750 _AD0BUSY	=	0x00ec
                    00EB    751 G$AD0WINT$0$0 == 0x00eb
                    00EB    752 _AD0WINT	=	0x00eb
                    00EA    753 G$AD0CM2$0$0 == 0x00ea
                    00EA    754 _AD0CM2	=	0x00ea
                    00E9    755 G$AD0CM1$0$0 == 0x00e9
                    00E9    756 _AD0CM1	=	0x00e9
                    00E8    757 G$AD0CM0$0$0 == 0x00e8
                    00E8    758 _AD0CM0	=	0x00e8
                    00FF    759 G$SPIF0$0$0 == 0x00ff
                    00FF    760 _SPIF0	=	0x00ff
                    00FE    761 G$WCOL0$0$0 == 0x00fe
                    00FE    762 _WCOL0	=	0x00fe
                    00FD    763 G$MODF0$0$0 == 0x00fd
                    00FD    764 _MODF0	=	0x00fd
                    00FC    765 G$RXOVRN0$0$0 == 0x00fc
                    00FC    766 _RXOVRN0	=	0x00fc
                    00FB    767 G$NSS0MD1$0$0 == 0x00fb
                    00FB    768 _NSS0MD1	=	0x00fb
                    00FA    769 G$NSS0MD0$0$0 == 0x00fa
                    00FA    770 _NSS0MD0	=	0x00fa
                    00F9    771 G$TXBMT0$0$0 == 0x00f9
                    00F9    772 _TXBMT0	=	0x00f9
                    00F8    773 G$SPI0EN$0$0 == 0x00f8
                    00F8    774 _SPI0EN	=	0x00f8
                    0087    775 G$MCU_SDA$0$0 == 0x0087
                    0087    776 _MCU_SDA	=	0x0087
                    0086    777 G$MCU_SCL$0$0 == 0x0086
                    0086    778 _MCU_SCL	=	0x0086
                    00A0    779 G$LED1$0$0 == 0x00a0
                    00A0    780 _LED1	=	0x00a0
                    00A1    781 G$LED2$0$0 == 0x00a1
                    00A1    782 _LED2	=	0x00a1
                    00A2    783 G$LED3$0$0 == 0x00a2
                    00A2    784 _LED3	=	0x00a2
                    00A3    785 G$LED4$0$0 == 0x00a3
                    00A3    786 _LED4	=	0x00a3
                    00A4    787 G$BUZZ$0$0 == 0x00a4
                    00A4    788 _BUZZ	=	0x00a4
                    0090    789 G$MCU_SCK$0$0 == 0x0090
                    0090    790 _MCU_SCK	=	0x0090
                    0091    791 G$MCU_MISO$0$0 == 0x0091
                    0091    792 _MCU_MISO	=	0x0091
                    0092    793 G$MCU_MOSI$0$0 == 0x0092
                    0092    794 _MCU_MOSI	=	0x0092
                    0093    795 G$RF_NSEL$0$0 == 0x0093
                    0093    796 _RF_NSEL	=	0x0093
                    0094    797 G$RF_NIRQ$0$0 == 0x0094
                    0094    798 _RF_NIRQ	=	0x0094
                    0095    799 G$RF_PWRDN$0$0 == 0x0095
                    0095    800 _RF_PWRDN	=	0x0095
                    0096    801 G$LCD_NSEL$0$0 == 0x0096
                    0096    802 _LCD_NSEL	=	0x0096
                    0097    803 G$LCD_A0$0$0 == 0x0097
                    0097    804 _LCD_A0	=	0x0097
                    0080    805 G$PB1$0$0 == 0x0080
                    0080    806 _PB1	=	0x0080
                    0081    807 G$PB2$0$0 == 0x0081
                    0081    808 _PB2	=	0x0081
                    0082    809 G$PB3$0$0 == 0x0082
                    0082    810 _PB3	=	0x0082
                    0083    811 G$PB4$0$0 == 0x0083
                    0083    812 _PB4	=	0x0083
                            813 ;--------------------------------------------------------
                            814 ; overlayable register banks
                            815 ;--------------------------------------------------------
                            816 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     817 	.ds 8
                            818 ;--------------------------------------------------------
                            819 ; internal ram data
                            820 ;--------------------------------------------------------
                            821 	.area DSEG    (DATA)
                            822 ;--------------------------------------------------------
                            823 ; overlayable items in internal ram 
                            824 ;--------------------------------------------------------
                            825 ;--------------------------------------------------------
                            826 ; indirectly addressable internal ram data
                            827 ;--------------------------------------------------------
                            828 	.area ISEG    (DATA)
                            829 ;--------------------------------------------------------
                            830 ; absolute internal ram data
                            831 ;--------------------------------------------------------
                            832 	.area IABS    (ABS,DATA)
                            833 	.area IABS    (ABS,DATA)
                            834 ;--------------------------------------------------------
                            835 ; bit data
                            836 ;--------------------------------------------------------
                            837 	.area BSEG    (BIT)
                            838 ;--------------------------------------------------------
                            839 ; paged external ram data
                            840 ;--------------------------------------------------------
                            841 	.area PSEG    (PAG,XDATA)
                            842 ;--------------------------------------------------------
                            843 ; external ram data
                            844 ;--------------------------------------------------------
                            845 	.area XSEG    (XDATA)
                    0000    846 G$EBIDInfo$0$0==.
   0000                     847 _EBIDInfo::
   0000                     848 	.ds 25
                    0019    849 Lebid.EBID_CheckAvailability$lTemp$1$30==.
   0019                     850 _EBID_CheckAvailability_lTemp_1_30:
   0019                     851 	.ds 1
                    001A    852 Lebid.EBID_SearchRadioRecord$lPointer$1$34==.
   001A                     853 _EBID_SearchRadioRecord_lPointer_1_34:
   001A                     854 	.ds 2
                    001C    855 Lebid.EBID_SearchRadioRecord$lTemp$1$34==.
   001C                     856 _EBID_SearchRadioRecord_lTemp_1_34:
   001C                     857 	.ds 1
                    001D    858 Lebid.EBID_SearchRadioRecord$lLength$1$34==.
   001D                     859 _EBID_SearchRadioRecord_lLength_1_34:
   001D                     860 	.ds 2
                            861 ;--------------------------------------------------------
                            862 ; absolute external ram data
                            863 ;--------------------------------------------------------
                            864 	.area XABS    (ABS,XDATA)
                            865 ;--------------------------------------------------------
                            866 ; external initialized ram data
                            867 ;--------------------------------------------------------
                            868 	.area XISEG   (XDATA)
                            869 	.area HOME    (CODE)
                            870 	.area GSINIT0 (CODE)
                            871 	.area GSINIT1 (CODE)
                            872 	.area GSINIT2 (CODE)
                            873 	.area GSINIT3 (CODE)
                            874 	.area GSINIT4 (CODE)
                            875 	.area GSINIT5 (CODE)
                            876 	.area GSINIT  (CODE)
                            877 	.area GSFINAL (CODE)
                            878 	.area CSEG    (CODE)
                            879 ;--------------------------------------------------------
                            880 ; global & static initialisations
                            881 ;--------------------------------------------------------
                            882 	.area HOME    (CODE)
                            883 	.area GSINIT  (CODE)
                            884 	.area GSFINAL (CODE)
                            885 	.area GSINIT  (CODE)
                            886 ;--------------------------------------------------------
                            887 ; Home
                            888 ;--------------------------------------------------------
                            889 	.area HOME    (CODE)
                            890 	.area HOME    (CODE)
                            891 ;--------------------------------------------------------
                            892 ; code
                            893 ;--------------------------------------------------------
                            894 	.area CSEG    (CODE)
                            895 ;------------------------------------------------------------
                            896 ;Allocation info for local variables in function 'EBID_CheckAvailability'
                            897 ;------------------------------------------------------------
                            898 ;lTemp                     Allocated with name '_EBID_CheckAvailability_lTemp_1_30'
                            899 ;------------------------------------------------------------
                    0000    900 	G$EBID_CheckAvailability$0$0 ==.
                    0000    901 	C$ebid.c$75$0$0 ==.
                            902 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:75: U8 EBID_CheckAvailability()
                            903 ;	-----------------------------------------
                            904 ;	 function EBID_CheckAvailability
                            905 ;	-----------------------------------------
   0000                     906 _EBID_CheckAvailability:
                    0007    907 	ar7 = 0x07
                    0006    908 	ar6 = 0x06
                    0005    909 	ar5 = 0x05
                    0004    910 	ar4 = 0x04
                    0003    911 	ar3 = 0x03
                    0002    912 	ar2 = 0x02
                    0001    913 	ar1 = 0x01
                    0000    914 	ar0 = 0x00
                    0000    915 	C$ebid.c$80$1$30 ==.
                            916 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:80: EBIDInfo.EBID_EEPromPointer.U16 = 0u;
   0000 90s00r17            917 	mov	dptr,#(_EBIDInfo + 0x0017)
   0003 E4                  918 	clr	a
   0004 F0                  919 	movx	@dptr,a
   0005 A3                  920 	inc	dptr
   0006 F0                  921 	movx	@dptr,a
                    0007    922 	C$ebid.c$82$1$30 ==.
                            923 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:82: if (Comm_IF_SMBusWrite(EBID_SMBUS_ADDRESS, 2u, (U8 *) &EBIDInfo.EBID_EEPromPointer) != SMBUS_TRANSMISSION_OK)
   0007 7Er17               924 	mov	r6,#(_EBIDInfo + 0x0017)
   0009 7Fs00               925 	mov	r7,#((_EBIDInfo + 0x0017) >> 8)
   000B 7D 00               926 	mov	r5,#0x00
   000D 90s00r00            927 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_2
   0010 74 02               928 	mov	a,#0x02
   0012 F0                  929 	movx	@dptr,a
   0013 90s00r00            930 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_3
   0016 EE                  931 	mov	a,r6
   0017 F0                  932 	movx	@dptr,a
   0018 A3                  933 	inc	dptr
   0019 EF                  934 	mov	a,r7
   001A F0                  935 	movx	@dptr,a
   001B A3                  936 	inc	dptr
   001C ED                  937 	mov	a,r5
   001D F0                  938 	movx	@dptr,a
   001E 75 82 52            939 	mov	dpl,#0x52
   0021 12s00r00            940 	lcall	_Comm_IF_SMBusWrite
   0024 E5 82               941 	mov	a,dpl
   0026 60 05               942 	jz	00102$
                    0028    943 	C$ebid.c$84$2$31 ==.
                            944 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:84: return FALSE;
   0028 75 82 00            945 	mov	dpl,#0x00
   002B 80 3F               946 	sjmp	00109$
   002D                     947 00102$:
                    002D    948 	C$ebid.c$88$1$30 ==.
                            949 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:88: if (Comm_IF_SMBusRead(EBID_SMBUS_ADDRESS, 1u, &lTemp) != SMBUS_RX_FINISHED)
   002D 90s00r00            950 	mov	dptr,#_Comm_IF_SMBusRead_PARM_2
   0030 74 01               951 	mov	a,#0x01
   0032 F0                  952 	movx	@dptr,a
   0033 90s00r00            953 	mov	dptr,#_Comm_IF_SMBusRead_PARM_3
   0036 74r19               954 	mov	a,#_EBID_CheckAvailability_lTemp_1_30
   0038 F0                  955 	movx	@dptr,a
   0039 A3                  956 	inc	dptr
   003A 74s00               957 	mov	a,#(_EBID_CheckAvailability_lTemp_1_30 >> 8)
   003C F0                  958 	movx	@dptr,a
   003D A3                  959 	inc	dptr
   003E E4                  960 	clr	a
   003F F0                  961 	movx	@dptr,a
   0040 75 82 52            962 	mov	dpl,#0x52
   0043 12s00r00            963 	lcall	_Comm_IF_SMBusRead
   0046 AF 82               964 	mov	r7,dpl
   0048 BF 01 02            965 	cjne	r7,#0x01,00120$
   004B 80 05               966 	sjmp	00104$
   004D                     967 00120$:
                    004D    968 	C$ebid.c$90$2$32 ==.
                            969 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:90: return FALSE;
   004D 75 82 00            970 	mov	dpl,#0x00
   0050 80 1A               971 	sjmp	00109$
   0052                     972 00104$:
                    0052    973 	C$ebid.c$93$1$30 ==.
                            974 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:93: if ( (0x01 == lTemp) || /* Board Record */
   0052 90s00r19            975 	mov	dptr,#_EBID_CheckAvailability_lTemp_1_30
   0055 E0                  976 	movx	a,@dptr
   0056 FF                  977 	mov	r7,a
   0057 BF 01 02            978 	cjne	r7,#0x01,00121$
   005A 80 08               979 	sjmp	00105$
   005C                     980 00121$:
                    005C    981 	C$ebid.c$94$1$30 ==.
                            982 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:94: (0x02 == lTemp) || /* MCU Record */
   005C BF 02 02            983 	cjne	r7,#0x02,00122$
   005F 80 03               984 	sjmp	00105$
   0061                     985 00122$:
                    0061    986 	C$ebid.c$95$1$30 ==.
                            987 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:95: (0x40 == lTemp) )  /* Radio Record */
   0061 BF 40 05            988 	cjne	r7,#0x40,00106$
   0064                     989 00105$:
                    0064    990 	C$ebid.c$97$2$33 ==.
                            991 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:97: return TRUE;
   0064 75 82 01            992 	mov	dpl,#0x01
   0067 80 03               993 	sjmp	00109$
   0069                     994 00106$:
                    0069    995 	C$ebid.c$100$1$30 ==.
                            996 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:100: return FALSE;
   0069 75 82 00            997 	mov	dpl,#0x00
   006C                     998 00109$:
                    006C    999 	C$ebid.c$101$1$30 ==.
                    006C   1000 	XG$EBID_CheckAvailability$0$0 ==.
   006C 22                 1001 	ret
                           1002 ;------------------------------------------------------------
                           1003 ;Allocation info for local variables in function 'EBID_SearchRadioRecord'
                           1004 ;------------------------------------------------------------
                           1005 ;lPointer                  Allocated with name '_EBID_SearchRadioRecord_lPointer_1_34'
                           1006 ;lTemp                     Allocated with name '_EBID_SearchRadioRecord_lTemp_1_34'
                           1007 ;lLength                   Allocated with name '_EBID_SearchRadioRecord_lLength_1_34'
                           1008 ;------------------------------------------------------------
                    006D   1009 	G$EBID_SearchRadioRecord$0$0 ==.
                    006D   1010 	C$ebid.c$113$1$30 ==.
                           1011 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:113: U8 EBID_SearchRadioRecord()
                           1012 ;	-----------------------------------------
                           1013 ;	 function EBID_SearchRadioRecord
                           1014 ;	-----------------------------------------
   006D                    1015 _EBID_SearchRadioRecord:
                    006D   1016 	C$ebid.c$118$1$30 ==.
                           1017 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:118: U8 lTemp = 0u;
   006D 90s00r1C           1018 	mov	dptr,#_EBID_SearchRadioRecord_lTemp_1_34
                    0070   1019 	C$ebid.c$122$1$34 ==.
                           1020 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:122: EBIDInfo.EBID_EEPromPointer.U16 = 0u;
   0070 E4                 1021 	clr	a
   0071 F0                 1022 	movx	@dptr,a
   0072 90s00r17           1023 	mov	dptr,#(_EBIDInfo + 0x0017)
   0075 F0                 1024 	movx	@dptr,a
   0076 A3                 1025 	inc	dptr
   0077 E4                 1026 	clr	a
   0078 F0                 1027 	movx	@dptr,a
                    0079   1028 	C$ebid.c$125$1$34 ==.
                           1029 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:125: while (0xFF != lTemp)
   0079                    1030 00122$:
   0079 90s00r1C           1031 	mov	dptr,#_EBID_SearchRadioRecord_lTemp_1_34
   007C E0                 1032 	movx	a,@dptr
   007D FF                 1033 	mov	r7,a
   007E BF FF 03           1034 	cjne	r7,#0xFF,00153$
   0081 02s02rFE           1035 	ljmp	00124$
   0084                    1036 00153$:
                    0084   1037 	C$ebid.c$127$2$35 ==.
                           1038 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:127: lPointer = SMBUS_ADDRESS_ENDIAN(EBIDInfo.EBID_EEPromPointer.U16);
   0084 90s00r17           1039 	mov	dptr,#(_EBIDInfo + 0x0017)
   0087 E0                 1040 	movx	a,@dptr
   0088 FE                 1041 	mov	r6,a
   0089 A3                 1042 	inc	dptr
   008A E0                 1043 	movx	a,@dptr
   008B 8E 07              1044 	mov	ar7,r6
   008D 7E 00              1045 	mov	r6,#0x00
   008F 90s00r17           1046 	mov	dptr,#(_EBIDInfo + 0x0017)
   0092 E0                 1047 	movx	a,@dptr
   0093 A3                 1048 	inc	dptr
   0094 E0                 1049 	movx	a,@dptr
   0095 FC                 1050 	mov	r4,a
   0096 7D 00              1051 	mov	r5,#0x00
   0098 90s00r1A           1052 	mov	dptr,#_EBID_SearchRadioRecord_lPointer_1_34
   009B EC                 1053 	mov	a,r4
   009C 4E                 1054 	orl	a,r6
   009D F0                 1055 	movx	@dptr,a
   009E ED                 1056 	mov	a,r5
   009F 4F                 1057 	orl	a,r7
   00A0 A3                 1058 	inc	dptr
   00A1 F0                 1059 	movx	@dptr,a
                    00A2   1060 	C$ebid.c$128$2$35 ==.
                           1061 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:128: if (Comm_IF_SMBusWrite(EBID_SMBUS_ADDRESS, 2u, (U8 *) &lPointer) != SMBUS_TRANSMISSION_OK) return FALSE;
   00A2 7Er1A              1062 	mov	r6,#_EBID_SearchRadioRecord_lPointer_1_34
   00A4 7Fs00              1063 	mov	r7,#(_EBID_SearchRadioRecord_lPointer_1_34 >> 8)
   00A6 7D 00              1064 	mov	r5,#0x00
   00A8 90s00r00           1065 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_2
   00AB 74 02              1066 	mov	a,#0x02
   00AD F0                 1067 	movx	@dptr,a
   00AE 90s00r00           1068 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_3
   00B1 EE                 1069 	mov	a,r6
   00B2 F0                 1070 	movx	@dptr,a
   00B3 A3                 1071 	inc	dptr
   00B4 EF                 1072 	mov	a,r7
   00B5 F0                 1073 	movx	@dptr,a
   00B6 A3                 1074 	inc	dptr
   00B7 ED                 1075 	mov	a,r5
   00B8 F0                 1076 	movx	@dptr,a
   00B9 75 82 52           1077 	mov	dpl,#0x52
   00BC 12s00r00           1078 	lcall	_Comm_IF_SMBusWrite
   00BF E5 82              1079 	mov	a,dpl
   00C1 60 06              1080 	jz	00102$
   00C3 75 82 00           1081 	mov	dpl,#0x00
   00C6 02s03r01           1082 	ljmp	00125$
   00C9                    1083 00102$:
                    00C9   1084 	C$ebid.c$131$2$35 ==.
                           1085 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:131: if (Comm_IF_SMBusRead(EBID_SMBUS_ADDRESS, 1u, &lTemp) != SMBUS_RX_FINISHED) return FALSE;
   00C9 90s00r00           1086 	mov	dptr,#_Comm_IF_SMBusRead_PARM_2
   00CC 74 01              1087 	mov	a,#0x01
   00CE F0                 1088 	movx	@dptr,a
   00CF 90s00r00           1089 	mov	dptr,#_Comm_IF_SMBusRead_PARM_3
   00D2 74r1C              1090 	mov	a,#_EBID_SearchRadioRecord_lTemp_1_34
   00D4 F0                 1091 	movx	@dptr,a
   00D5 A3                 1092 	inc	dptr
   00D6 74s00              1093 	mov	a,#(_EBID_SearchRadioRecord_lTemp_1_34 >> 8)
   00D8 F0                 1094 	movx	@dptr,a
   00D9 A3                 1095 	inc	dptr
   00DA E4                 1096 	clr	a
   00DB F0                 1097 	movx	@dptr,a
   00DC 75 82 52           1098 	mov	dpl,#0x52
   00DF 12s00r00           1099 	lcall	_Comm_IF_SMBusRead
   00E2 AF 82              1100 	mov	r7,dpl
   00E4 BF 01 02           1101 	cjne	r7,#0x01,00155$
   00E7 80 06              1102 	sjmp	00104$
   00E9                    1103 00155$:
   00E9 75 82 00           1104 	mov	dpl,#0x00
   00EC 02s03r01           1105 	ljmp	00125$
   00EF                    1106 00104$:
                    00EF   1107 	C$ebid.c$133$2$35 ==.
                           1108 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:133: if (0x40 == lTemp)
   00EF 90s00r1C           1109 	mov	dptr,#_EBID_SearchRadioRecord_lTemp_1_34
   00F2 E0                 1110 	movx	a,@dptr
   00F3 FF                 1111 	mov	r7,a
   00F4 BF 40 02           1112 	cjne	r7,#0x40,00156$
   00F7 80 03              1113 	sjmp	00157$
   00F9                    1114 00156$:
   00F9 02s02r28           1115 	ljmp	00114$
   00FC                    1116 00157$:
                    00FC   1117 	C$ebid.c$136$3$36 ==.
                           1118 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:136: EBIDInfo.EBID_EEPromPointer.U16 += 0x1B;
   00FC 90s00r17           1119 	mov	dptr,#(_EBIDInfo + 0x0017)
   00FF E0                 1120 	movx	a,@dptr
   0100 FD                 1121 	mov	r5,a
   0101 A3                 1122 	inc	dptr
   0102 E0                 1123 	movx	a,@dptr
   0103 FE                 1124 	mov	r6,a
   0104 74 1B              1125 	mov	a,#0x1B
   0106 2D                 1126 	add	a,r5
   0107 FD                 1127 	mov	r5,a
   0108 E4                 1128 	clr	a
   0109 3E                 1129 	addc	a,r6
   010A FE                 1130 	mov	r6,a
   010B 90s00r17           1131 	mov	dptr,#(_EBIDInfo + 0x0017)
   010E ED                 1132 	mov	a,r5
   010F F0                 1133 	movx	@dptr,a
   0110 A3                 1134 	inc	dptr
   0111 EE                 1135 	mov	a,r6
   0112 F0                 1136 	movx	@dptr,a
                    0113   1137 	C$ebid.c$137$3$36 ==.
                           1138 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:137: lPointer = SMBUS_ADDRESS_ENDIAN(EBIDInfo.EBID_EEPromPointer.U16);
   0113 90s00r17           1139 	mov	dptr,#(_EBIDInfo + 0x0017)
   0116 E0                 1140 	movx	a,@dptr
   0117 A3                 1141 	inc	dptr
   0118 E0                 1142 	movx	a,@dptr
   0119 8D 04              1143 	mov	ar4,r5
   011B 7B 00              1144 	mov	r3,#0x00
   011D 90s00r17           1145 	mov	dptr,#(_EBIDInfo + 0x0017)
   0120 E0                 1146 	movx	a,@dptr
   0121 A3                 1147 	inc	dptr
   0122 E0                 1148 	movx	a,@dptr
   0123 8E 05              1149 	mov	ar5,r6
   0125 7E 00              1150 	mov	r6,#0x00
   0127 90s00r1A           1151 	mov	dptr,#_EBID_SearchRadioRecord_lPointer_1_34
   012A ED                 1152 	mov	a,r5
   012B 4B                 1153 	orl	a,r3
   012C F0                 1154 	movx	@dptr,a
   012D EE                 1155 	mov	a,r6
   012E 4C                 1156 	orl	a,r4
   012F A3                 1157 	inc	dptr
   0130 F0                 1158 	movx	@dptr,a
                    0131   1159 	C$ebid.c$138$3$36 ==.
                           1160 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:138: if (Comm_IF_SMBusWrite(EBID_SMBUS_ADDRESS, 2u, (U8 *) &lPointer) != SMBUS_TRANSMISSION_OK) return FALSE;
   0131 7Dr1A              1161 	mov	r5,#_EBID_SearchRadioRecord_lPointer_1_34
   0133 7Es00              1162 	mov	r6,#(_EBID_SearchRadioRecord_lPointer_1_34 >> 8)
   0135 7C 00              1163 	mov	r4,#0x00
   0137 90s00r00           1164 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_2
   013A 74 02              1165 	mov	a,#0x02
   013C F0                 1166 	movx	@dptr,a
   013D 90s00r00           1167 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_3
   0140 ED                 1168 	mov	a,r5
   0141 F0                 1169 	movx	@dptr,a
   0142 A3                 1170 	inc	dptr
   0143 EE                 1171 	mov	a,r6
   0144 F0                 1172 	movx	@dptr,a
   0145 A3                 1173 	inc	dptr
   0146 EC                 1174 	mov	a,r4
   0147 F0                 1175 	movx	@dptr,a
   0148 75 82 52           1176 	mov	dpl,#0x52
   014B 12s00r00           1177 	lcall	_Comm_IF_SMBusWrite
   014E E5 82              1178 	mov	a,dpl
   0150 60 06              1179 	jz	00106$
   0152 75 82 00           1180 	mov	dpl,#0x00
   0155 02s03r01           1181 	ljmp	00125$
   0158                    1182 00106$:
                    0158   1183 	C$ebid.c$140$3$36 ==.
                           1184 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:140: if (Comm_IF_SMBusRead(EBID_SMBUS_ADDRESS, EBID_BOARDNAME_LENGTH, EBIDInfo.EBID_BoardName) != SMBUS_RX_FINISHED) return FALSE;
   0158 90s00r00           1185 	mov	dptr,#_Comm_IF_SMBusRead_PARM_2
   015B 74 15              1186 	mov	a,#0x15
   015D F0                 1187 	movx	@dptr,a
   015E 90s00r00           1188 	mov	dptr,#_Comm_IF_SMBusRead_PARM_3
   0161 74r00              1189 	mov	a,#_EBIDInfo
   0163 F0                 1190 	movx	@dptr,a
   0164 A3                 1191 	inc	dptr
   0165 74s00              1192 	mov	a,#(_EBIDInfo >> 8)
   0167 F0                 1193 	movx	@dptr,a
   0168 A3                 1194 	inc	dptr
   0169 E4                 1195 	clr	a
   016A F0                 1196 	movx	@dptr,a
   016B 75 82 52           1197 	mov	dpl,#0x52
   016E 12s00r00           1198 	lcall	_Comm_IF_SMBusRead
   0171 AE 82              1199 	mov	r6,dpl
   0173 BE 01 02           1200 	cjne	r6,#0x01,00159$
   0176 80 06              1201 	sjmp	00108$
   0178                    1202 00159$:
   0178 75 82 00           1203 	mov	dpl,#0x00
   017B 02s03r01           1204 	ljmp	00125$
   017E                    1205 00108$:
                    017E   1206 	C$ebid.c$143$3$36 ==.
                           1207 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:143: EBIDInfo.EBID_EEPromPointer.U16 += 0x28;
   017E 90s00r17           1208 	mov	dptr,#(_EBIDInfo + 0x0017)
   0181 E0                 1209 	movx	a,@dptr
   0182 FD                 1210 	mov	r5,a
   0183 A3                 1211 	inc	dptr
   0184 E0                 1212 	movx	a,@dptr
   0185 FE                 1213 	mov	r6,a
   0186 74 28              1214 	mov	a,#0x28
   0188 2D                 1215 	add	a,r5
   0189 FD                 1216 	mov	r5,a
   018A E4                 1217 	clr	a
   018B 3E                 1218 	addc	a,r6
   018C FE                 1219 	mov	r6,a
   018D 90s00r17           1220 	mov	dptr,#(_EBIDInfo + 0x0017)
   0190 ED                 1221 	mov	a,r5
   0191 F0                 1222 	movx	@dptr,a
   0192 A3                 1223 	inc	dptr
   0193 EE                 1224 	mov	a,r6
   0194 F0                 1225 	movx	@dptr,a
                    0195   1226 	C$ebid.c$144$3$36 ==.
                           1227 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:144: lPointer = SMBUS_ADDRESS_ENDIAN(EBIDInfo.EBID_EEPromPointer.U16);
   0195 90s00r17           1228 	mov	dptr,#(_EBIDInfo + 0x0017)
   0198 E0                 1229 	movx	a,@dptr
   0199 A3                 1230 	inc	dptr
   019A E0                 1231 	movx	a,@dptr
   019B 8D 04              1232 	mov	ar4,r5
   019D 7B 00              1233 	mov	r3,#0x00
   019F 90s00r17           1234 	mov	dptr,#(_EBIDInfo + 0x0017)
   01A2 E0                 1235 	movx	a,@dptr
   01A3 A3                 1236 	inc	dptr
   01A4 E0                 1237 	movx	a,@dptr
   01A5 8E 05              1238 	mov	ar5,r6
   01A7 7E 00              1239 	mov	r6,#0x00
   01A9 90s00r1A           1240 	mov	dptr,#_EBID_SearchRadioRecord_lPointer_1_34
   01AC ED                 1241 	mov	a,r5
   01AD 4B                 1242 	orl	a,r3
   01AE F0                 1243 	movx	@dptr,a
   01AF EE                 1244 	mov	a,r6
   01B0 4C                 1245 	orl	a,r4
   01B1 A3                 1246 	inc	dptr
   01B2 F0                 1247 	movx	@dptr,a
                    01B3   1248 	C$ebid.c$145$3$36 ==.
                           1249 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:145: if (Comm_IF_SMBusWrite(EBID_SMBUS_ADDRESS, 2u, (U8 *) &lPointer) != SMBUS_TRANSMISSION_OK) return FALSE;
   01B3 7Dr1A              1250 	mov	r5,#_EBID_SearchRadioRecord_lPointer_1_34
   01B5 7Es00              1251 	mov	r6,#(_EBID_SearchRadioRecord_lPointer_1_34 >> 8)
   01B7 7C 00              1252 	mov	r4,#0x00
   01B9 90s00r00           1253 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_2
   01BC 74 02              1254 	mov	a,#0x02
   01BE F0                 1255 	movx	@dptr,a
   01BF 90s00r00           1256 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_3
   01C2 ED                 1257 	mov	a,r5
   01C3 F0                 1258 	movx	@dptr,a
   01C4 A3                 1259 	inc	dptr
   01C5 EE                 1260 	mov	a,r6
   01C6 F0                 1261 	movx	@dptr,a
   01C7 A3                 1262 	inc	dptr
   01C8 EC                 1263 	mov	a,r4
   01C9 F0                 1264 	movx	@dptr,a
   01CA 75 82 52           1265 	mov	dpl,#0x52
   01CD 12s00r00           1266 	lcall	_Comm_IF_SMBusWrite
   01D0 E5 82              1267 	mov	a,dpl
   01D2 60 06              1268 	jz	00110$
   01D4 75 82 00           1269 	mov	dpl,#0x00
   01D7 02s03r01           1270 	ljmp	00125$
   01DA                    1271 00110$:
                    01DA   1272 	C$ebid.c$147$3$36 ==.
                           1273 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:147: if (Comm_IF_SMBusRead(EBID_SMBUS_ADDRESS, 2u, (U8 *) &EBIDInfo.EBID_Freqband) != SMBUS_RX_FINISHED) return FALSE;
   01DA 7Dr15              1274 	mov	r5,#(_EBIDInfo + 0x0015)
   01DC 7Es00              1275 	mov	r6,#((_EBIDInfo + 0x0015) >> 8)
   01DE 7C 00              1276 	mov	r4,#0x00
   01E0 90s00r00           1277 	mov	dptr,#_Comm_IF_SMBusRead_PARM_2
   01E3 74 02              1278 	mov	a,#0x02
   01E5 F0                 1279 	movx	@dptr,a
   01E6 90s00r00           1280 	mov	dptr,#_Comm_IF_SMBusRead_PARM_3
   01E9 ED                 1281 	mov	a,r5
   01EA F0                 1282 	movx	@dptr,a
   01EB A3                 1283 	inc	dptr
   01EC EE                 1284 	mov	a,r6
   01ED F0                 1285 	movx	@dptr,a
   01EE A3                 1286 	inc	dptr
   01EF EC                 1287 	mov	a,r4
   01F0 F0                 1288 	movx	@dptr,a
   01F1 75 82 52           1289 	mov	dpl,#0x52
   01F4 12s00r00           1290 	lcall	_Comm_IF_SMBusRead
   01F7 AE 82              1291 	mov	r6,dpl
   01F9 BE 01 02           1292 	cjne	r6,#0x01,00161$
   01FC 80 06              1293 	sjmp	00112$
   01FE                    1294 00161$:
   01FE 75 82 00           1295 	mov	dpl,#0x00
   0201 02s03r01           1296 	ljmp	00125$
   0204                    1297 00112$:
                    0204   1298 	C$ebid.c$148$3$36 ==.
                           1299 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:148: EBIDInfo.EBID_Freqband = SMBUS_ADDRESS_ENDIAN(EBIDInfo.EBID_Freqband);
   0204 90s00r15           1300 	mov	dptr,#(_EBIDInfo + 0x0015)
   0207 E0                 1301 	movx	a,@dptr
   0208 FD                 1302 	mov	r5,a
   0209 A3                 1303 	inc	dptr
   020A E0                 1304 	movx	a,@dptr
   020B FE                 1305 	mov	r6,a
   020C 8D 04              1306 	mov	ar4,r5
   020E 7B 00              1307 	mov	r3,#0x00
   0210 8E 05              1308 	mov	ar5,r6
   0212 7E 00              1309 	mov	r6,#0x00
   0214 ED                 1310 	mov	a,r5
   0215 42 03              1311 	orl	ar3,a
   0217 EE                 1312 	mov	a,r6
   0218 42 04              1313 	orl	ar4,a
   021A 90s00r15           1314 	mov	dptr,#(_EBIDInfo + 0x0015)
   021D EB                 1315 	mov	a,r3
   021E F0                 1316 	movx	@dptr,a
   021F A3                 1317 	inc	dptr
   0220 EC                 1318 	mov	a,r4
   0221 F0                 1319 	movx	@dptr,a
                    0222   1320 	C$ebid.c$150$3$36 ==.
                           1321 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:150: return TRUE;
   0222 75 82 01           1322 	mov	dpl,#0x01
   0225 02s03r01           1323 	ljmp	00125$
   0228                    1324 00114$:
                    0228   1325 	C$ebid.c$154$2$35 ==.
                           1326 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:154: if ((0x01 != lTemp) && (0x02 != lTemp))
   0228 BF 01 02           1327 	cjne	r7,#0x01,00162$
   022B 80 0B              1328 	sjmp	00116$
   022D                    1329 00162$:
   022D BF 02 02           1330 	cjne	r7,#0x02,00163$
   0230 80 06              1331 	sjmp	00116$
   0232                    1332 00163$:
                    0232   1333 	C$ebid.c$156$3$37 ==.
                           1334 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:156: return FALSE;
   0232 75 82 00           1335 	mov	dpl,#0x00
   0235 02s03r01           1336 	ljmp	00125$
   0238                    1337 00116$:
                    0238   1338 	C$ebid.c$160$2$35 ==.
                           1339 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:160: EBIDInfo.EBID_EEPromPointer.U16 += 0x0E;
   0238 90s00r17           1340 	mov	dptr,#(_EBIDInfo + 0x0017)
   023B E0                 1341 	movx	a,@dptr
   023C FE                 1342 	mov	r6,a
   023D A3                 1343 	inc	dptr
   023E E0                 1344 	movx	a,@dptr
   023F FF                 1345 	mov	r7,a
   0240 74 0E              1346 	mov	a,#0x0E
   0242 2E                 1347 	add	a,r6
   0243 FE                 1348 	mov	r6,a
   0244 E4                 1349 	clr	a
   0245 3F                 1350 	addc	a,r7
   0246 FF                 1351 	mov	r7,a
   0247 90s00r17           1352 	mov	dptr,#(_EBIDInfo + 0x0017)
   024A EE                 1353 	mov	a,r6
   024B F0                 1354 	movx	@dptr,a
   024C A3                 1355 	inc	dptr
   024D EF                 1356 	mov	a,r7
   024E F0                 1357 	movx	@dptr,a
                    024F   1358 	C$ebid.c$161$2$35 ==.
                           1359 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:161: lPointer = SMBUS_ADDRESS_ENDIAN(EBIDInfo.EBID_EEPromPointer.U16);
   024F 90s00r17           1360 	mov	dptr,#(_EBIDInfo + 0x0017)
   0252 E0                 1361 	movx	a,@dptr
   0253 A3                 1362 	inc	dptr
   0254 E0                 1363 	movx	a,@dptr
   0255 8E 05              1364 	mov	ar5,r6
   0257 7C 00              1365 	mov	r4,#0x00
   0259 90s00r17           1366 	mov	dptr,#(_EBIDInfo + 0x0017)
   025C E0                 1367 	movx	a,@dptr
   025D A3                 1368 	inc	dptr
   025E E0                 1369 	movx	a,@dptr
   025F 8F 06              1370 	mov	ar6,r7
   0261 7F 00              1371 	mov	r7,#0x00
   0263 90s00r1A           1372 	mov	dptr,#_EBID_SearchRadioRecord_lPointer_1_34
   0266 EE                 1373 	mov	a,r6
   0267 4C                 1374 	orl	a,r4
   0268 F0                 1375 	movx	@dptr,a
   0269 EF                 1376 	mov	a,r7
   026A 4D                 1377 	orl	a,r5
   026B A3                 1378 	inc	dptr
   026C F0                 1379 	movx	@dptr,a
                    026D   1380 	C$ebid.c$162$2$35 ==.
                           1381 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:162: if (Comm_IF_SMBusWrite(EBID_SMBUS_ADDRESS, 2u, (U8 *) &lPointer) != SMBUS_TRANSMISSION_OK) return FALSE;
   026D 7Er1A              1382 	mov	r6,#_EBID_SearchRadioRecord_lPointer_1_34
   026F 7Fs00              1383 	mov	r7,#(_EBID_SearchRadioRecord_lPointer_1_34 >> 8)
   0271 7D 00              1384 	mov	r5,#0x00
   0273 90s00r00           1385 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_2
   0276 74 02              1386 	mov	a,#0x02
   0278 F0                 1387 	movx	@dptr,a
   0279 90s00r00           1388 	mov	dptr,#_Comm_IF_SMBusWrite_PARM_3
   027C EE                 1389 	mov	a,r6
   027D F0                 1390 	movx	@dptr,a
   027E A3                 1391 	inc	dptr
   027F EF                 1392 	mov	a,r7
   0280 F0                 1393 	movx	@dptr,a
   0281 A3                 1394 	inc	dptr
   0282 ED                 1395 	mov	a,r5
   0283 F0                 1396 	movx	@dptr,a
   0284 75 82 52           1397 	mov	dpl,#0x52
   0287 12s00r00           1398 	lcall	_Comm_IF_SMBusWrite
   028A E5 82              1399 	mov	a,dpl
   028C 60 05              1400 	jz	00119$
   028E 75 82 00           1401 	mov	dpl,#0x00
   0291 80 6E              1402 	sjmp	00125$
   0293                    1403 00119$:
                    0293   1404 	C$ebid.c$164$2$35 ==.
                           1405 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:164: if (Comm_IF_SMBusRead(EBID_SMBUS_ADDRESS, 2u, (U8 *) &lLength) != SMBUS_RX_FINISHED) return FALSE;
   0293 7Er1D              1406 	mov	r6,#_EBID_SearchRadioRecord_lLength_1_34
   0295 7Fs00              1407 	mov	r7,#(_EBID_SearchRadioRecord_lLength_1_34 >> 8)
   0297 7D 00              1408 	mov	r5,#0x00
   0299 90s00r00           1409 	mov	dptr,#_Comm_IF_SMBusRead_PARM_2
   029C 74 02              1410 	mov	a,#0x02
   029E F0                 1411 	movx	@dptr,a
   029F 90s00r00           1412 	mov	dptr,#_Comm_IF_SMBusRead_PARM_3
   02A2 EE                 1413 	mov	a,r6
   02A3 F0                 1414 	movx	@dptr,a
   02A4 A3                 1415 	inc	dptr
   02A5 EF                 1416 	mov	a,r7
   02A6 F0                 1417 	movx	@dptr,a
   02A7 A3                 1418 	inc	dptr
   02A8 ED                 1419 	mov	a,r5
   02A9 F0                 1420 	movx	@dptr,a
   02AA 75 82 52           1421 	mov	dpl,#0x52
   02AD 12s00r00           1422 	lcall	_Comm_IF_SMBusRead
   02B0 AF 82              1423 	mov	r7,dpl
   02B2 BF 01 02           1424 	cjne	r7,#0x01,00165$
   02B5 80 05              1425 	sjmp	00121$
   02B7                    1426 00165$:
   02B7 75 82 00           1427 	mov	dpl,#0x00
   02BA 80 45              1428 	sjmp	00125$
   02BC                    1429 00121$:
                    02BC   1430 	C$ebid.c$165$2$35 ==.
                           1431 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:165: lLength = SMBUS_ADDRESS_ENDIAN(lLength);
   02BC 90s00r1D           1432 	mov	dptr,#_EBID_SearchRadioRecord_lLength_1_34
   02BF E0                 1433 	movx	a,@dptr
   02C0 FE                 1434 	mov	r6,a
   02C1 A3                 1435 	inc	dptr
   02C2 E0                 1436 	movx	a,@dptr
   02C3 FF                 1437 	mov	r7,a
   02C4 8E 05              1438 	mov	ar5,r6
   02C6 7C 00              1439 	mov	r4,#0x00
   02C8 8F 06              1440 	mov	ar6,r7
   02CA 7F 00              1441 	mov	r7,#0x00
   02CC 90s00r1D           1442 	mov	dptr,#_EBID_SearchRadioRecord_lLength_1_34
   02CF EE                 1443 	mov	a,r6
   02D0 4C                 1444 	orl	a,r4
   02D1 F0                 1445 	movx	@dptr,a
   02D2 EF                 1446 	mov	a,r7
   02D3 4D                 1447 	orl	a,r5
   02D4 A3                 1448 	inc	dptr
   02D5 F0                 1449 	movx	@dptr,a
                    02D6   1450 	C$ebid.c$167$2$35 ==.
                           1451 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:167: EBIDInfo.EBID_EEPromPointer.U16 += lLength + 2u;
   02D6 90s00r17           1452 	mov	dptr,#(_EBIDInfo + 0x0017)
   02D9 E0                 1453 	movx	a,@dptr
   02DA FE                 1454 	mov	r6,a
   02DB A3                 1455 	inc	dptr
   02DC E0                 1456 	movx	a,@dptr
   02DD FF                 1457 	mov	r7,a
   02DE 90s00r1D           1458 	mov	dptr,#_EBID_SearchRadioRecord_lLength_1_34
   02E1 E0                 1459 	movx	a,@dptr
   02E2 FC                 1460 	mov	r4,a
   02E3 A3                 1461 	inc	dptr
   02E4 E0                 1462 	movx	a,@dptr
   02E5 FD                 1463 	mov	r5,a
   02E6 74 02              1464 	mov	a,#0x02
   02E8 2C                 1465 	add	a,r4
   02E9 FC                 1466 	mov	r4,a
   02EA E4                 1467 	clr	a
   02EB 3D                 1468 	addc	a,r5
   02EC FD                 1469 	mov	r5,a
   02ED EC                 1470 	mov	a,r4
   02EE 2E                 1471 	add	a,r6
   02EF FE                 1472 	mov	r6,a
   02F0 ED                 1473 	mov	a,r5
   02F1 3F                 1474 	addc	a,r7
   02F2 FF                 1475 	mov	r7,a
   02F3 90s00r17           1476 	mov	dptr,#(_EBIDInfo + 0x0017)
   02F6 EE                 1477 	mov	a,r6
   02F7 F0                 1478 	movx	@dptr,a
   02F8 A3                 1479 	inc	dptr
   02F9 EF                 1480 	mov	a,r7
   02FA F0                 1481 	movx	@dptr,a
   02FB 02s00r79           1482 	ljmp	00122$
   02FE                    1483 00124$:
                    02FE   1484 	C$ebid.c$170$1$34 ==.
                           1485 ;	C:\Users\TaisikHam\Documents\GitHub\ChibiOS\testhal\STM32F30x\TS_SPI\SI4X55\ebid.c:170: return FALSE;
   02FE 75 82 00           1486 	mov	dpl,#0x00
   0301                    1487 00125$:
                    0301   1488 	C$ebid.c$171$1$34 ==.
                    0301   1489 	XG$EBID_SearchRadioRecord$0$0 ==.
   0301 22                 1490 	ret
                           1491 	.area CSEG    (CODE)
                           1492 	.area CONST   (CODE)
                           1493 	.area XINIT   (CODE)
                           1494 	.area CABS    (ABS,CODE)
